import os
import requests
import psycopg2

from flask import Flask, flash, render_template, request, url_for, session
from sqlalchemy import create_engine
from sqlalchemy import insert
from werkzeug.utils import redirect
from sqlalchemy.orm import scoped_session, sessionmaker
from flask_session import Session

app = Flask(__name__)

# checking environment variables
print(os.environ['DATABASE_URL'])
print(os.environ['FLASK_APP'])

if not os.getenv("DATABASE_URL"):
    raise RuntimeError("DATABASE_URL is not set")

# Configure session to use filesystem
app.config["SESSION_PERMANENT"] = False
app.config["SESSION_TYPE"] = "filesystem"
app.config['SQLALCHEMY_DATABASE_URI'] = 'postgres://enrjbwpogarfwo' \
                                        ':8c48c2461ae5556e202cf036c86a96fdb14272810befb99ac17103c333a14082@ec2-3-218' \
                                        '-47-9.compute-1.amazonaws.com:5432/d21fv63o2is7mq'

# set session secret key
app.secret_key = 'ENGO551_Lab1'

# set up database connection **MAKE SURE ITS postgresql AND NOT postgres**
engine = create_engine('postgresql://enrjbwpogarfwo:8c48c2461ae5556e202cf036c86a96fdb14272810befb99ac17103c333a14082'
                       '@ec2-3-218-47-9.compute-1.amazonaws.com:5432/d21fv63o2is7mq')

db = scoped_session(sessionmaker(bind=engine))

conn = psycopg2.connect(
    host="ec2-3-218-47-9.compute-1.amazonaws.com",
    database="d21fv63o2is7mq",
    user="enrjbwpogarfwo",
    password="8c48c2461ae5556e202cf036c86a96fdb14272810befb99ac17103c333a14082")

cur = conn.cursor()

# routes
@app.route('/', methods=["GET","POST"])
def index():
    if request.method == 'POST':
        username = request.form.get('username')
        password = request.form.get('password')

        no_u_query = "SELECT COUNT (userid) FROM users;"
        no_u = db.execute(no_u_query).fetchall()
        new_userid = no_u[0][0] + 1

        new_user_query = "INSERT INTO users (userid,username,password) VALUES ('" + str(new_userid) + "', '" + username + "', '" + password + "')"
        db.execute(new_user_query)
        db.commit()

        return render_template('login.html')

@app.route('/addHabit', methods=["GET","POST"])
def addHabit():
    if request.method == 'POST':
        locationID = request.form.get('location') # there should be a way to have the user choose a location and then return the ID instead
        
        # get habit category based on locationID
        getHabitCat_q = "SELECT HabitCategory FROM HabitLocations WHERE LocationID = '" + locationID + "'"
        HabitCat = db.execute(getHabitCat_q).fetchall();
        
        # insert habit into users table
        addHabit_q = "INSERT INTO users (" + HabitCat + ") VALUES ('" + lcoationID + "') WHERE userid = '" + session["userid"] + "'"

        return render_template('successfully_added_habit.html') # "success" page

if __name__ == '__main__':
    app.run()